/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package daw;

import controladores.UsuarioController;
import entidades.Disco;
import entidades.Usuario;
import java.awt.HeadlessException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Hibernate;

/**
 *
 * @author ignacio
 */
public class MostrarUsuarios extends javax.swing.JFrame {

    private UsuarioController usuarioController = new UsuarioController();

    /**
     * Creates new form MostrarUsuarios
     */
    public MostrarUsuarios() {
        setLocationRelativeTo(null);
        setResizable(false);
        initComponents();
        cargarUsuariosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CrearUsuario = new javax.swing.JButton();
        BorrarUsuario = new javax.swing.JButton();
        ActualizarUsuario = new javax.swing.JButton();
        Volver = new javax.swing.JButton();
        TextoTitulo = new javax.swing.JLabel();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 720, 460));

        CrearUsuario.setBackground(new java.awt.Color(255, 255, 255));
        CrearUsuario.setForeground(new java.awt.Color(0, 0, 0));
        CrearUsuario.setText("Crear Usuario");
        CrearUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(CrearUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 140, 190, 50));

        BorrarUsuario.setBackground(new java.awt.Color(255, 255, 255));
        BorrarUsuario.setForeground(new java.awt.Color(0, 0, 0));
        BorrarUsuario.setText("Borrar Usuario");
        BorrarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(BorrarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, 190, 50));

        ActualizarUsuario.setBackground(new java.awt.Color(255, 255, 255));
        ActualizarUsuario.setForeground(new java.awt.Color(0, 0, 0));
        ActualizarUsuario.setText("Actualizar Usuario");
        ActualizarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(ActualizarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 340, 190, 50));

        Volver.setBackground(new java.awt.Color(255, 255, 255));
        Volver.setForeground(new java.awt.Color(0, 0, 0));
        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });
        getContentPane().add(Volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 190, 50));

        TextoTitulo.setFont(new java.awt.Font("Fira Sans Condensed ExtraBold", 1, 24)); // NOI18N
        TextoTitulo.setForeground(new java.awt.Color(255, 255, 255));
        TextoTitulo.setText("Listado de Usuarios");
        getContentPane().add(TextoTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 250, 40));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoVarios.png"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 640));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CrearUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearUsuarioActionPerformed

        try {
            String nombre = JOptionPane.showInputDialog(this, "Nombre del usuario:");
            String dni = JOptionPane.showInputDialog(this, "DNI del usuario:");
            String localidad = JOptionPane.showInputDialog(this, "Localidad del usuario:");
            String telefono = JOptionPane.showInputDialog(this, "Teléfono del usuario:");

            if (nombre == null || dni == null || localidad == null || telefono == null
                    || nombre.isEmpty() || dni.isEmpty() || localidad.isEmpty() || telefono.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.");
                return;
            }

            Usuario nuevo = new Usuario();
            nuevo.setNombreUsuario(nombre);
            nuevo.setDniUsuario(dni);
            nuevo.setLocalidadUsuario(localidad);
            nuevo.setTelefUsuario(telefono);

            usuarioController.create(nuevo);
            cargarUsuariosEnTabla();
            JOptionPane.showMessageDialog(this, "Usuario creado correctamente.");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al crear usuario.");
        }

    }//GEN-LAST:event_CrearUsuarioActionPerformed

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        new Seleccion().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VolverActionPerformed

    private void BorrarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarUsuarioActionPerformed

        try {
            // Obtener lista de usuarios
            List<Usuario> usuarios = usuarioController.findAll();
            if (usuarios.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay usuarios registrados.");
                return;
            }

            JComboBox<String> comboUsuarios = new JComboBox<>();
            Map<String, Usuario> mapaUsuarios = new HashMap<>();
            for (Usuario u : usuarios) {
                String key = "(" + u.getCodUsuario() + ") - " + u.getNombreUsuario();
                comboUsuarios.addItem(key);
                mapaUsuarios.put(key, u);
            }

            int opcion = JOptionPane.showConfirmDialog(this, comboUsuarios,
                    "Selecciona el usuario a borrar", JOptionPane.OK_CANCEL_OPTION);
            if (opcion != JOptionPane.OK_OPTION) {
                return;
            }

            Usuario seleccionado = mapaUsuarios.get(comboUsuarios.getSelectedItem());

            // Refrescar desde la BBDD para evitar efectos de caché
            Usuario actualizado = usuarioController.findById(seleccionado.getCodUsuario());

            if (actualizado == null) {
                JOptionPane.showMessageDialog(this, "El usuario ya no existe en la base de datos.");
                return;
            }

            if (!actualizado.getVentaCollection().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "No se puede borrar el usuario. Tiene ventas registradas.",
                        "Integridad referencial",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            usuarioController.delete(actualizado.getCodUsuario());
            JOptionPane.showMessageDialog(this, "Usuario eliminado correctamente.");
            cargarUsuariosEnTabla();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al borrar el usuario: " + e.getMessage());

        }
    }//GEN-LAST:event_BorrarUsuarioActionPerformed

    private void ActualizarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarUsuarioActionPerformed
        int filaSeleccionada = jTable1.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un usuario de la tabla para actualizar.");
            return;
        }

        // Obtener el ID del usuario seleccionado
        int codUsuario = Integer.parseInt(jTable1.getValueAt(filaSeleccionada, 0).toString());
        Usuario usuario = usuarioController.findById(codUsuario);

        if (usuario != null) {
            String nuevoNombre = JOptionPane.showInputDialog(this, "Nuevo nombre:", usuario.getNombreUsuario());
            String nuevoDNI = JOptionPane.showInputDialog(this, "Nuevo DNI:", usuario.getDniUsuario());
            String nuevaLocalidad = JOptionPane.showInputDialog(this, "Nueva localidad:", usuario.getLocalidadUsuario());
            String nuevoTelefono = JOptionPane.showInputDialog(this, "Nuevo teléfono:", usuario.getTelefUsuario());

            if (nuevoNombre == null || nuevoNombre.trim().isEmpty()
                    || nuevoDNI == null || nuevoDNI.trim().isEmpty()
                    || nuevaLocalidad == null || nuevaLocalidad.trim().isEmpty()
                    || nuevoTelefono == null || nuevoTelefono.trim().isEmpty()) {

                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.");
                return;
            }

            usuario.setNombreUsuario(nuevoNombre);
            usuario.setDniUsuario(nuevoDNI);
            usuario.setLocalidadUsuario(nuevaLocalidad);
            usuario.setTelefUsuario(nuevoTelefono);

            usuarioController.update(usuario);
            cargarUsuariosEnTabla();
            JOptionPane.showMessageDialog(this, "Usuario actualizado correctamente.");
        } else {
            JOptionPane.showMessageDialog(this, "Error: No se encontró el usuario.");
        }
    }//GEN-LAST:event_ActualizarUsuarioActionPerformed

    private void cargarUsuariosEnTabla() {
        List<Usuario> usuarios = usuarioController.findAll();

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[]{"ID", "Nombre", "DNI", "Localidad", "Teléfono", "Ventas Asociadas"});

        for (Usuario u : usuarios) {
            String ventas = (u.getVentaCollection() != null && !u.getVentaCollection().isEmpty())
                    ? u.getVentaCollection().stream()
                            .map(v -> v.getCodVenta().toString()) // Convertir cada venta en String
                            .collect(Collectors.joining(", ")) // Separar por comas
                    : "Sin ventas";

            modelo.addRow(new Object[]{
                u.getCodUsuario(),
                u.getNombreUsuario(),
                u.getDniUsuario(),
                u.getLocalidadUsuario(),
                u.getTelefUsuario(),
                ventas
            });
        }

        jTable1.setModel(modelo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MostrarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MostrarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MostrarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MostrarUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MostrarUsuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarUsuario;
    private javax.swing.JButton BorrarUsuario;
    private javax.swing.JButton CrearUsuario;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel TextoTitulo;
    private javax.swing.JButton Volver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

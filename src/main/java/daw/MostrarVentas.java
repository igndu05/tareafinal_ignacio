/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package daw;

import controladores.DiscoController;
import controladores.UsuarioController;
import controladores.VentaController;
import entidades.DetalleVenta;
import entidades.Disco;
import entidades.Usuario;
import entidades.Venta;
import java.awt.HeadlessException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ignacio
 */
public class MostrarVentas extends javax.swing.JFrame {

    private VentaController ventaController = new VentaController();
    private DiscoController discoController = new DiscoController();
    private UsuarioController usuarioController = new UsuarioController();

    /**
     * Creates new form MostrarVentas
     */
    public MostrarVentas() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        cargarVentasEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CrearVenta = new javax.swing.JButton();
        BorrarVenta = new javax.swing.JButton();
        ActualizarVenta = new javax.swing.JButton();
        Volver = new javax.swing.JButton();
        TextoTitulo = new javax.swing.JLabel();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 710, -1));

        CrearVenta.setBackground(new java.awt.Color(255, 255, 255));
        CrearVenta.setForeground(new java.awt.Color(0, 0, 0));
        CrearVenta.setText("Crear Venta");
        CrearVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearVentaActionPerformed(evt);
            }
        });
        getContentPane().add(CrearVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 140, 190, 50));

        BorrarVenta.setBackground(new java.awt.Color(255, 255, 255));
        BorrarVenta.setForeground(new java.awt.Color(0, 0, 0));
        BorrarVenta.setText("Borrar Venta");
        BorrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(BorrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, 190, 50));

        ActualizarVenta.setBackground(new java.awt.Color(255, 255, 255));
        ActualizarVenta.setForeground(new java.awt.Color(0, 0, 0));
        ActualizarVenta.setText("Actualizar Venta");
        ActualizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(ActualizarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 340, 190, 50));

        Volver.setBackground(new java.awt.Color(255, 255, 255));
        Volver.setForeground(new java.awt.Color(0, 0, 0));
        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });
        getContentPane().add(Volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 190, 50));

        TextoTitulo.setFont(new java.awt.Font("Fira Sans Condensed ExtraBold", 1, 24)); // NOI18N
        TextoTitulo.setForeground(new java.awt.Color(255, 255, 255));
        TextoTitulo.setText("Listado de Ventas");
        getContentPane().add(TextoTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 230, 60));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoVarios.png"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CrearVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearVentaActionPerformed
        try {
            // Obtener lista de usuarios
            List<Usuario> usuarios = usuarioController.findAll();
            if (usuarios.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay usuarios registrados.");
                return;
            }

            JComboBox<String> comboUsuarios = new JComboBox<>();
            Map<String, Usuario> mapaUsuarios = new HashMap<>();
            for (Usuario usuario : usuarios) {
                String opcion = "(" + usuario.getCodUsuario() + ") - " + usuario.getNombreUsuario();
                comboUsuarios.addItem(opcion);
                mapaUsuarios.put(opcion, usuario);
            }

            int opcionUsuario = JOptionPane.showConfirmDialog(this, comboUsuarios, "Selecciona un usuario", JOptionPane.OK_CANCEL_OPTION);
            if (opcionUsuario != JOptionPane.OK_OPTION) {
                return;
            }
            Usuario usuarioSeleccionado = mapaUsuarios.get(comboUsuarios.getSelectedItem());

            // Crear la venta
            Venta venta = new Venta();
            venta.setFechaVenta(new Date());

            Usuario usuarioTemporal = new Usuario();
            usuarioTemporal.setCodUsuario(usuarioSeleccionado.getCodUsuario());
            venta.setUsuario(usuarioTemporal);

            boolean agregarOtro = true;

            while (agregarOtro) {
                List<Disco> discos = discoController.findAll();
                if (discos.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No hay discos registrados.");
                    return;
                }

                JComboBox<String> comboDiscos = new JComboBox<>();
                Map<String, Disco> mapaDiscos = new HashMap<>();
                for (Disco disco : discos) {
                    String opcion = "(" + disco.getCodDisco() + ") - " + disco.getNomDisco();
                    comboDiscos.addItem(opcion);
                    mapaDiscos.put(opcion, disco);
                }

                int opcionDisco = JOptionPane.showConfirmDialog(this, comboDiscos, "Selecciona un disco", JOptionPane.OK_CANCEL_OPTION);
                if (opcionDisco != JOptionPane.OK_OPTION) {
                    break;
                }

                Disco discoSeleccionado = mapaDiscos.get(comboDiscos.getSelectedItem());

                DetalleVenta detalle = new DetalleVenta();
                detalle.setDisco(discoSeleccionado);
                venta.addDetalleVenta(detalle);

                int continuar = JOptionPane.showConfirmDialog(this,
                        "¿Quieres añadir otro disco a esta venta?",
                        "Agregar más discos",
                        JOptionPane.YES_NO_OPTION);

                agregarOtro = (continuar == JOptionPane.YES_OPTION);
            }

            if (venta.getDetalleVentaCollection().isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se puede crear una venta sin al menos un disco.");
                return;
            }

            ventaController.create(venta);
            JOptionPane.showMessageDialog(this, "Venta creada correctamente.");
            cargarVentasEnTabla();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al crear venta: " + e.getMessage());
        }
    }//GEN-LAST:event_CrearVentaActionPerformed

    private void BorrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarVentaActionPerformed
        try {
            List<Venta> ventas = ventaController.findAll();
            if (ventas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay ventas registradas.");
                return;
            }

            // Crear JComboBox para seleccionar una venta
            JComboBox<String> comboVentas = new JComboBox<>();
            Map<String, Venta> mapaVentas = new HashMap<>();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            for (Venta v : ventas) {
                String texto = "(" + v.getCodVenta() + ") - "
                        + (v.getUsuario() != null ? v.getUsuario().getNombreUsuario() : "Sin usuario")
                        + " - " + sdf.format(v.getFechaVenta());
                comboVentas.addItem(texto);
                mapaVentas.put(texto, v);
            }

            int opcion = JOptionPane.showConfirmDialog(this, comboVentas, "Selecciona la venta a borrar", JOptionPane.OK_CANCEL_OPTION);
            if (opcion != JOptionPane.OK_OPTION) {
                return;
            }

            Venta ventaSeleccionada = mapaVentas.get(comboVentas.getSelectedItem());

            if (ventaSeleccionada.getDetalleVentaCollection() != null && !ventaSeleccionada.getDetalleVentaCollection().isEmpty()) {
                int confirm = JOptionPane.showConfirmDialog(this,
                        "La venta tiene detalles asociados. ¿Deseas eliminarla junto a sus detalles?",
                        "Confirmar borrado", JOptionPane.YES_NO_OPTION);
                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            ventaController.delete(ventaSeleccionada.getCodVenta());
            JOptionPane.showMessageDialog(this, "Venta eliminada correctamente.");
            cargarVentasEnTabla();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al borrar la venta: " + e.getMessage());
        }
    }//GEN-LAST:event_BorrarVentaActionPerformed

    private void ActualizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarVentaActionPerformed
        try {
            // 1. Selección de la venta
            List<Venta> ventas = ventaController.findAll();
            if (ventas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay ventas registradas.");
                return;
            }

            JComboBox<String> comboVentas = new JComboBox<>();
            Map<String, Venta> mapaVentas = new HashMap<>();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            for (Venta v : ventas) {
                String key = "(" + v.getCodVenta() + ") - "
                        + (v.getUsuario() != null ? v.getUsuario().getNombreUsuario() : "Sin usuario")
                        + " - " + sdf.format(v.getFechaVenta());
                comboVentas.addItem(key);
                mapaVentas.put(key, v);
            }

            int opcionVenta = JOptionPane.showConfirmDialog(this, comboVentas, "Selecciona la venta a modificar", JOptionPane.OK_CANCEL_OPTION);
            if (opcionVenta != JOptionPane.OK_OPTION) {
                return;
            }
            Venta venta = mapaVentas.get(comboVentas.getSelectedItem());

            // 2. Selección del nuevo usuario
            List<Usuario> usuarios = usuarioController.findAll();
            JComboBox<String> comboUsuarios = new JComboBox<>();
            Map<String, Usuario> mapaUsuarios = new HashMap<>();

            for (Usuario u : usuarios) {
                String key = "(" + u.getCodUsuario() + ") - " + u.getNombreUsuario();
                comboUsuarios.addItem(key);
                mapaUsuarios.put(key, u);
            }

            if (venta.getUsuario() != null) {
                String actual = "(" + venta.getUsuario().getCodUsuario() + ") - " + venta.getUsuario().getNombreUsuario();
                comboUsuarios.setSelectedItem(actual);
            }

            int opcionUsuario = JOptionPane.showConfirmDialog(this, comboUsuarios, "Selecciona el nuevo usuario", JOptionPane.OK_CANCEL_OPTION);
            if (opcionUsuario != JOptionPane.OK_OPTION) {
                return;
            }
            Usuario nuevoUsuario = mapaUsuarios.get(comboUsuarios.getSelectedItem());

            // 3. Selección del nuevo disco
            List<Disco> discos = discoController.findAll();
            JComboBox<String> comboDiscos = new JComboBox<>();
            Map<String, Disco> mapaDiscos = new HashMap<>();

            for (Disco d : discos) {
                String key = "(" + d.getCodDisco() + ") - " + d.getNomDisco();
                comboDiscos.addItem(key);
                mapaDiscos.put(key, d);
            }

            int opcionDisco = JOptionPane.showConfirmDialog(this, comboDiscos, "Selecciona el nuevo disco", JOptionPane.OK_CANCEL_OPTION);
            if (opcionDisco != JOptionPane.OK_OPTION) {
                return;
            }
            Disco nuevoDisco = mapaDiscos.get(comboDiscos.getSelectedItem());

            // Actualizar venta
            venta.setUsuario(nuevoUsuario);
            venta.setFechaVenta(new Date());
            venta.getDetalleVentaCollection().clear();

            DetalleVenta detalle = new DetalleVenta();
            detalle.setDisco(nuevoDisco);
            detalle.setVenta(venta);
            venta.addDetalleVenta(detalle);

            ventaController.update(venta);
            JOptionPane.showMessageDialog(this, "Venta actualizada correctamente.");
            cargarVentasEnTabla();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar venta: " + e.getMessage());
        }
    }//GEN-LAST:event_ActualizarVentaActionPerformed

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        new Seleccion().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VolverActionPerformed

    private void cargarVentasEnTabla() {
        List<Venta> ventas = ventaController.findAll();

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[]{"ID", "Usuario", "Fecha", "Discos vendidos"});

        for (Venta venta : ventas) {
            String discos = venta.getDetalleVentaCollection().stream()
                    .map(detalle -> detalle.getDisco().getNomDisco())
                    .collect(Collectors.joining(", "));

            modelo.addRow(new Object[]{
                venta.getCodVenta(),
                venta.getUsuario().getNombreUsuario(),
                new SimpleDateFormat("dd/MM/yyyy").format(venta.getFechaVenta()),
                discos
            });
        }

        jTable1.setModel(modelo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MostrarVentas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarVenta;
    private javax.swing.JButton BorrarVenta;
    private javax.swing.JButton CrearVenta;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel TextoTitulo;
    private javax.swing.JButton Volver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

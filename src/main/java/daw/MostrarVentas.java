/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package daw;

import controladores.DiscoController;
import controladores.UsuarioController;
import controladores.VentaController;
import entidades.DetalleVenta;
import entidades.Disco;
import entidades.Usuario;
import entidades.Venta;
import java.awt.HeadlessException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ignacio
 */
public class MostrarVentas extends javax.swing.JFrame {

    private VentaController ventaController = new VentaController();
    private DiscoController discoController = new DiscoController();
    private UsuarioController usuarioController = new UsuarioController();

    /**
     * Creates new form MostrarVentas
     */
    public MostrarVentas() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        cargarVentasEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CrearVenta = new javax.swing.JButton();
        BorrarVenta = new javax.swing.JButton();
        ActualizarVenta = new javax.swing.JButton();
        Volver = new javax.swing.JButton();
        TextoTitulo = new javax.swing.JLabel();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 710, -1));

        CrearVenta.setBackground(new java.awt.Color(255, 255, 255));
        CrearVenta.setForeground(new java.awt.Color(0, 0, 0));
        CrearVenta.setText("Crear Venta");
        CrearVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearVentaActionPerformed(evt);
            }
        });
        getContentPane().add(CrearVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 140, 190, 50));

        BorrarVenta.setBackground(new java.awt.Color(255, 255, 255));
        BorrarVenta.setForeground(new java.awt.Color(0, 0, 0));
        BorrarVenta.setText("Borrar Venta");
        BorrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(BorrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, 190, 50));

        ActualizarVenta.setBackground(new java.awt.Color(255, 255, 255));
        ActualizarVenta.setForeground(new java.awt.Color(0, 0, 0));
        ActualizarVenta.setText("Actualizar Venta");
        ActualizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(ActualizarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 340, 190, 50));

        Volver.setBackground(new java.awt.Color(255, 255, 255));
        Volver.setForeground(new java.awt.Color(0, 0, 0));
        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });
        getContentPane().add(Volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 190, 50));

        TextoTitulo.setFont(new java.awt.Font("Fira Sans Condensed ExtraBold", 1, 24)); // NOI18N
        TextoTitulo.setForeground(new java.awt.Color(255, 255, 255));
        TextoTitulo.setText("Listado de Ventas");
        getContentPane().add(TextoTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 230, 60));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoVarios.png"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CrearVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearVentaActionPerformed
        try {
            Usuario usuario = null;
            while (usuario == null) {
                String inputCodUsuario = JOptionPane.showInputDialog(this, "Ingrese el código del usuario:");
                if (inputCodUsuario == null) {
                    return; // Cancelar
                }
                try {
                    int codUsuario = Integer.parseInt(inputCodUsuario.trim());
                    usuario = usuarioController.findById(codUsuario);
                    if (usuario == null) {
                        JOptionPane.showMessageDialog(this, "Usuario no encontrado. Ingrese un código existente.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un número válido para el código de usuario.");
                }
            }

            Disco disco = null;
            while (disco == null) {
                String inputCodDisco = JOptionPane.showInputDialog(this, "Ingrese el código del disco:");
                if (inputCodDisco == null) {
                    return; // Cancelar
                }
                try {
                    int codDisco = Integer.parseInt(inputCodDisco.trim());
                    disco = discoController.findById(codDisco);
                    if (disco == null) {
                        JOptionPane.showMessageDialog(this, "Disco no encontrado. Ingrese un código existente.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un número válido para el código del disco.");
                }
            }

            Venta venta = new Venta();
            venta.setFechaVenta(new Date());
            venta.setCodUsuario(usuario);

            DetalleVenta detalle = new DetalleVenta();
            detalle.setDisco(disco);

            venta.addDetalleVenta(detalle);
            usuario.addVenta(venta);

            ventaController.create(venta);
            usuarioController.update(usuario);

            JOptionPane.showMessageDialog(this, "Venta creada correctamente.");
            cargarVentasEnTabla();

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Error al crear venta: " + e.getMessage());
        }
    }//GEN-LAST:event_CrearVentaActionPerformed

    private void BorrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarVentaActionPerformed
        try {
            Venta venta = null;
            while (venta == null) {
                String inputCodVenta = JOptionPane.showInputDialog(this, "Ingrese el código de la venta a borrar:");
                if (inputCodVenta == null) {
                    return; // Cancelar
                }
                try {
                    int codVenta = Integer.parseInt(inputCodVenta.trim());
                    venta = ventaController.findById(codVenta);
                    if (venta == null) {
                        JOptionPane.showMessageDialog(this, "Venta no encontrada. Ingrese un código existente.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un número válido para el código de venta.");
                }
            }

            ventaController.delete(venta.getCodVenta());
            JOptionPane.showMessageDialog(this, "Venta borrada correctamente.");
            cargarVentasEnTabla();

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Error al borrar venta: " + e.getMessage());
        }
    }//GEN-LAST:event_BorrarVentaActionPerformed

    private void ActualizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarVentaActionPerformed
        try {
        Venta venta = null;
        while (venta == null) {
            String inputCodVenta = JOptionPane.showInputDialog(this, "Ingrese el código de la venta a modificar:");
            if (inputCodVenta == null) return; // Cancelar
            try {
                int codVenta = Integer.parseInt(inputCodVenta.trim());
                venta = ventaController.findById(codVenta);
                if (venta == null) {
                    JOptionPane.showMessageDialog(this, "Venta no encontrada. Ingrese un código existente.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un número válido para el código de venta.");
            }
        }

        Usuario usuario = null;
        while (usuario == null) {
            String inputCodUsuario = JOptionPane.showInputDialog(this, "Ingrese el nuevo código del usuario:");
            if (inputCodUsuario == null) return; // Cancelar
            try {
                int codUsuario = Integer.parseInt(inputCodUsuario.trim());
                usuario = usuarioController.findById(codUsuario);
                if (usuario == null) {
                    JOptionPane.showMessageDialog(this, "Usuario no encontrado. Ingrese un código existente.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un número válido para el código de usuario.");
            }
        }

        Disco disco = null;
        while (disco == null) {
            String inputCodDisco = JOptionPane.showInputDialog(this, "Ingrese el nuevo código del disco:");
            if (inputCodDisco == null) return; // Cancelar
            try {
                int codDisco = Integer.parseInt(inputCodDisco.trim());
                disco = discoController.findById(codDisco);
                if (disco == null) {
                    JOptionPane.showMessageDialog(this, "Disco no encontrado. Ingrese un código existente.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un número válido para el código del disco.");
            }
        }

        // Actualizamos la venta
        venta.setCodUsuario(usuario);
        venta.setFechaVenta(new Date());

        // Limpiamos detalles antiguos y agregamos el nuevo detalle con el disco
        venta.getDetalleVentaCollection().clear();

        DetalleVenta detalle = new DetalleVenta();
        detalle.setDisco(disco);
        // detalle.setCantidad(1); // si tienes cantidad

        venta.addDetalleVenta(detalle);

        ventaController.update(venta);
        JOptionPane.showMessageDialog(this, "Venta actualizada correctamente.");
        cargarVentasEnTabla();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar venta: " + e.getMessage());
    }
    }//GEN-LAST:event_ActualizarVentaActionPerformed

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        new Seleccion().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VolverActionPerformed

    private void cargarVentasEnTabla() {
        List<Venta> ventas = ventaController.findAll();

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[]{"ID", "Usuario", "Fecha"});

        for (Venta venta : ventas) {
            modelo.addRow(new Object[]{
                venta.getCodVenta(),
                venta.getCodUsuario().getNombreUsuario(),
                new SimpleDateFormat("dd/MM/yyyy").format(venta.getFechaVenta())
            });
        }

        jTable1.setModel(modelo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MostrarVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MostrarVentas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarVenta;
    private javax.swing.JButton BorrarVenta;
    private javax.swing.JButton CrearVenta;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel TextoTitulo;
    private javax.swing.JButton Volver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

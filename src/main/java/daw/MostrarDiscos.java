/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package daw;

import controladores.ArtistaController;
import java.util.List;

import javax.swing.table.DefaultTableModel;

import controladores.DiscoController;
import entidades.Artista;
import entidades.Disco;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author ignacio
 */
public class MostrarDiscos extends javax.swing.JFrame {

    private DiscoController discoController = new DiscoController();
    private ArtistaController artistaController = new ArtistaController();

    /**
     * Creates new form MostrarDiscos
     */
    public MostrarDiscos() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        cargarDiscosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CrearDisco = new javax.swing.JButton();
        BorrarDisco = new javax.swing.JButton();
        ActualizarDisco = new javax.swing.JButton();
        Volver = new javax.swing.JButton();
        TextoTitulo = new javax.swing.JLabel();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 720, -1));

        CrearDisco.setBackground(new java.awt.Color(255, 255, 255));
        CrearDisco.setForeground(new java.awt.Color(0, 0, 0));
        CrearDisco.setText("Crear Disco");
        CrearDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearDiscoActionPerformed(evt);
            }
        });
        getContentPane().add(CrearDisco, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 140, 190, 50));

        BorrarDisco.setBackground(new java.awt.Color(255, 255, 255));
        BorrarDisco.setForeground(new java.awt.Color(0, 0, 0));
        BorrarDisco.setText("Borrar Disco");
        BorrarDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarDiscoActionPerformed(evt);
            }
        });
        getContentPane().add(BorrarDisco, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, 190, 50));

        ActualizarDisco.setBackground(new java.awt.Color(255, 255, 255));
        ActualizarDisco.setForeground(new java.awt.Color(0, 0, 0));
        ActualizarDisco.setText("Actualizar Disco");
        ActualizarDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarDiscoActionPerformed(evt);
            }
        });
        getContentPane().add(ActualizarDisco, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 340, 190, 50));

        Volver.setBackground(new java.awt.Color(255, 255, 255));
        Volver.setForeground(new java.awt.Color(0, 0, 0));
        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });
        getContentPane().add(Volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 190, 50));

        TextoTitulo.setFont(new java.awt.Font("Fira Sans Condensed ExtraBold", 1, 24)); // NOI18N
        TextoTitulo.setForeground(new java.awt.Color(255, 255, 255));
        TextoTitulo.setText("Listado de Discos");
        getContentPane().add(TextoTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 320, 70));

        Fondo.setFont(new java.awt.Font("Fira Sans Condensed", 1, 18)); // NOI18N
        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoVarios.png"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 640));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        new Seleccion().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VolverActionPerformed

    private void CrearDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearDiscoActionPerformed
        CrearDisco.addActionListener(e -> {
            String nombre = JOptionPane.showInputDialog(this, "Nombre del disco:");
            if (nombre == null || nombre.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nombre no puede estar vacío.");
                return;
            }

            String fechaStr = JOptionPane.showInputDialog(this, "Fecha de lanzamiento (YYYY-MM-DD):");
            Date fechaLanzamiento = null;
            try {
                SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                fechaLanzamiento = formato.parse(fechaStr);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Formato de fecha inválido.");
                return;
            }

            String artistaIdStr = JOptionPane.showInputDialog(this, "ID del artista asociado:");
            int artistaId;
            try {
                artistaId = Integer.parseInt(artistaIdStr);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "ID artista debe ser un número entero.");
                return;
            }

            Artista artista = artistaController.findById(artistaId);
            if (artista == null) {
                JOptionPane.showMessageDialog(this, "No existe artista con ese ID.");
                return;
            }

            Disco disco = new Disco();
            disco.setNomDisco(nombre);
            disco.setFechaLanzamiento(fechaLanzamiento);
            disco.setArtista(artista);

            discoController.create(disco);
            cargarDiscosEnTabla();
        });
    }//GEN-LAST:event_CrearDiscoActionPerformed

    private void BorrarDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarDiscoActionPerformed
        BorrarDisco.addActionListener(e -> {
            int filaSeleccionada = jTable1.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Selecciona un disco para borrar.");
                return;
            }

            int id = Integer.parseInt(jTable1.getValueAt(filaSeleccionada, 0).toString());
            Disco disco = discoController.findById(id);

            // Verificar si el disco está asociado a ventas
            if (disco != null && !disco.getDetalleVentaCollection().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "No puedes eliminar este disco porque está asociado a una venta. "
                        + "Primero elimina sus registros en ventas.");
                return;
            }

            int confirm = JOptionPane.showConfirmDialog(this,
                    "¿Estás seguro que deseas eliminar este disco?", "Confirmar", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                discoController.delete(id);
                cargarDiscosEnTabla();
                JOptionPane.showMessageDialog(this, "Disco eliminado correctamente.");
            }
        });
    }//GEN-LAST:event_BorrarDiscoActionPerformed

    private void ActualizarDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarDiscoActionPerformed
        ActualizarDisco.addActionListener(e -> {
            int filaSeleccionada = jTable1.getSelectedRow();
            if (filaSeleccionada == -1) {
                JOptionPane.showMessageDialog(this, "Selecciona un disco para actualizar.");
                return;
            }

            int id = Integer.parseInt(jTable1.getValueAt(filaSeleccionada, 0).toString());
            Disco disco = discoController.findById(id);

            if (disco != null) {
                String nuevoNombre = JOptionPane.showInputDialog(this, "Nuevo nombre:", disco.getNomDisco());
                if (nuevoNombre == null || nuevoNombre.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "El nombre no puede estar vacío.");
                    return;
                }

                // Validar fecha de lanzamiento
                String nuevaFechaStr = JOptionPane.showInputDialog(null, "Inserte la nueva fecha (YYYY-MM-DD)");
                Date nuevaFecha;
                try {
                    SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                    formato.setLenient(false); // Evita fechas incorrectas como "2025-13-32"
                    nuevaFecha = formato.parse(nuevaFechaStr);
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Usa YYYY-MM-DD.");
                    return;
                }

                // Validar ID del artista
                String nuevoArtistaIdStr = JOptionPane.showInputDialog(this, "Nuevo ID artista:", disco.getArtista() != null ? Integer.toString(disco.getArtista().getCodArtista()) : "");
                if (nuevoArtistaIdStr == null || nuevoArtistaIdStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "El ID de artista no puede estar vacío.");
                    return;
                }

                int nuevoArtistaId;
                try {
                    nuevoArtistaId = Integer.parseInt(nuevoArtistaIdStr);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "El ID de artista debe ser un número entero.");
                    return;
                }

                Artista nuevoArtista = artistaController.findById(nuevoArtistaId);
                if (nuevoArtista == null) {
                    JOptionPane.showMessageDialog(this, "No existe artista con ese ID.");
                    return;
                }

                // Actualizar disco con los nuevos valores
                disco.setNomDisco(nuevoNombre);
                disco.setFechaLanzamiento(nuevaFecha);
                disco.setArtista(nuevoArtista);

                discoController.update(disco);
                cargarDiscosEnTabla();
                JOptionPane.showMessageDialog(this, "Disco actualizado correctamente.");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el disco con el ID especificado.");
            }
        });
    }//GEN-LAST:event_ActualizarDiscoActionPerformed

    private void cargarDiscosEnTabla() {
        List<Disco> discos = discoController.findAll();

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[]{"ID", "Nombre", "Lanzamiento", "Artista"});

        for (Disco disco : discos) {
            modelo.addRow(new Object[]{
                disco.getCodDisco(),
                disco.getNomDisco(),
                disco.getFechaLanzamiento() != null ? disco.getFechaFormateada() : "No disponible",
                disco.getArtista() != null ? disco.getArtista().getNomArtista() : "N/A"
            });

        }

        jTable1.setModel(modelo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MostrarDiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MostrarDiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MostrarDiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MostrarDiscos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MostrarDiscos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActualizarDisco;
    private javax.swing.JButton BorrarDisco;
    private javax.swing.JButton CrearDisco;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel TextoTitulo;
    private javax.swing.JButton Volver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
